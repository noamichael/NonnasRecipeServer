{"version":3,"sources":["webpack:///./src/app/recipe.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAA2C;AACkB;AAEH;AAe1D;IAEE,uBACU,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;IACtB,CAAC;IAEH,sBAAI,wCAAa;aAAjB;YACE,OAAO,qEAAW,CAAC,aAAa,CAAC;QACnC,CAAC;;;OAAA;IAED,sBAAI,yCAAc;aAAlB;YACE,OAAO,uBAAuB,CAAC;QACjC,CAAC;;;OAAA;IAED,qCAAa,GAAb,UAAc,KAAc;QAC1B,OAAO,CAAG,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,cAAU;IACtE,CAAC;IAED,oCAAY,GAAZ,UAAa,EAAU,EAAE,KAAc;QACrC,OAAU,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,SAAI,EAAI,CAAC;IAC9C,CAAC;IAED,iCAAS,GAAT,UAAU,EAAU;QAClB,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAyB,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7E,CAAC;IAED,kCAAU,GAAV,UAAW,IAAY,EAAE,KAAa,EAAE,KAAW;QACjD,IAAI,MAAM,GAAG,IAAI,+DAAU,CAAC;YAC1B,UAAU,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,EAAE,EAAC,IAAI,QAAE,KAAK,SAAC,CAAC;SACpD,CAAC,CAAC;QACH,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAA2B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,EAAC,MAAM,UAAC,CAAC,CAAC;IACtF,CAAC;IAED,sCAAc,GAAd;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAA8B,IAAI,CAAC,aAAa,kBAAe,CAAC,CAAC;IACvF,CAAC;IAED,kCAAU,GAAV,UAAW,MAAc;QACvB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAyB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC;IAClF,CAAC;IAED,oCAAY,GAAZ,UAAa,MAAc;QACzB,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9D,CAAC;IA3CQ,aAAa;QAHzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;+EAIgB,+DAAU;OAHf,aAAa,CA6CzB;IAAD,oBAAC;CAAA;AA7CyB","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http'\nimport { Recipe } from './schema/recipe';\nimport { environment } from '../environments/environment';\n\nexport interface RecipeResponse<T> {\n  data: T\n  count?: number\n  error?: {code: number, message: string},\n  page?: number,\n  totalRecordCount?: number\n}\n\nexport interface TypeOption { label: string, value: string }\n\n@Injectable({\n  providedIn: '***REMOVED***'\n})\nexport class RecipeService {\n\n  constructor(\n    private http: HttpClient\n  ) { }\n\n    get basePublicUrl(){\n      return environment.basePublicUrl;\n    }\n\n    get basePrivateUrl(){\n      return 'http://localhost:7890';\n    }\n\n    getRecipesUrl(local: boolean){\n      return `${local ? this.basePrivateUrl : this.basePublicUrl}/recipes`\n    }\n\n    getRecipeUrl(id: number, local: boolean){\n      return `${this.getRecipesUrl(local)}/${id}`;\n    }\n\n    getRecipe(id: number){\n      return this.http.get<RecipeResponse<Recipe>>(this.getRecipeUrl(id, false));\n    }\n\n    getRecipes(page: number, count: number, query?: any){\n      let params = new HttpParams({\n        fromObject: Object.assign({}, query, {page, count})\n      });\n      return this.http.get<RecipeResponse<Recipe[]>>(this.getRecipesUrl(false), {params});\n    }\n\n    getRecipeTypes(){\n      return this.http.get<RecipeResponse<string[]>>(`${this.basePublicUrl}/recipe-types`);\n    }\n\n    saveRecipe(recipe: Recipe){\n      return this.http.post<RecipeResponse<Recipe>>(this.getRecipesUrl(true), recipe);\n    }\n\n    deleteRecipe(recipe: Recipe){\n      return this.http.delete(this.getRecipeUrl(recipe.id, true));\n    }\n    \n}\n"],"sourceRoot":""}